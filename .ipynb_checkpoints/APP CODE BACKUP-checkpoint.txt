from flask import jsonify
from flask import Flask, request, render_template, send_from_directory
from ocr import predict
from keras.models import model_from_json
import tensorflow as tf
from keras import backend as K
import os
import tornado.wsgi
import tornado.httpserver
import sqlite3
from flask import Flask, render_template, request, redirect, session, url_for
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
REPO_DIRNAME = os.path.dirname(os.path.abspath(__file__))

############################### Database Creation ########################################


app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.secret_key = "ThisIsNotASecret:p"

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    email = db.Column(db.String(100), unique=True)
    username = db.Column(db.String(100), unique=True)
    password = db.Column(db.String(100))

    def __init__(self, first_name, last_name, email, username, password):
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.username = username
        self.password = password

############################################################################################

class ImagenetClassifier(object):
    def __init__(self):
        print('LOAD MODEL ...')
        with open('Resource/model_prediction.json', 'r') as f:
            self.w_model_predict = model_from_json(f.read())
        self.w_model_predict.load_weights('Resource/iam_words--17--1.887.h5')
    def predict_image(self, image_filename):
        try:
            with graph.as_default():
                pred_text_model_word = predict(self.w_model_predict, image_filename)
            return pred_text_model_word
        except Exception as err:
            print('Prediction error: ', err)
            return (False, 'Something went wrong when predict the '
                           'image. Maybe try another one?')

global ocr_model
ocr_model = ImagenetClassifier()
global graph
#graph = tf.get_default_graph()
graph = tf.compat.v1.get_default_graph()
'''

def index():
    return render_template("index.html")
'''

'''  
@app.route("/")
def index():
    global state
    return render_template("index.html", state=state)

####
@app.route("/home")
def home():
    return render_template("start.html")
####'''

###################################  USER MANAGEMENT #########################################
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/main')
def main():
    return render_template('main.html')
    
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        first_name = request.form['first_name']
        last_name = request.form['last_name']
        email = request.form['email']
        username = request.form['username']
        password = request.form['password']

        # Check if email or username already exists
        existing_user = User.query.filter((User.email == email) | (User.username == username)).first()
        if existing_user:
            return render_template('register.html', message='Email or username already exists')

        user = User(first_name=first_name, last_name=last_name, email=email, username=username, password=password)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username, password=password).first()
        if user:
            session['logged_in'] = True
            return redirect(url_for('home'))
        else:
            return render_template('login.html', message='Invalid login credentials')
    return render_template('login.html')


@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    return redirect(url_for('login'))


@app.route('/home')
def home():
    if 'logged_in' in session:
        return render_template('home.html')
    return redirect(url_for('login'))

##################################################################################################




'''
###############################################################################################

app.config['DATABASE'] = 'x.db'
conn_pool = None

def get_connection():
    global conn_pool
    if conn_pool is None:
        conn_pool = sqlite3.connect(app.config['DATABASE'], check_same_thread=False)
    return conn_pool

# Route for signup
@app.route('/login', methods=['POST'])
def login():
    global state
    username = request.json['username']
    password = request.json['password']

    # Get a connection from the pool
    conn = get_connection().cursor()

    # Check if the user exists in the database
    conn.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
    user = conn.fetchone()

    # Close the connection
    conn.close()

    if user:
        success_message = "Login successful!"
        state = True  # Set state to True
        return jsonify(success_message=success_message)
    else:
        error_message = "Invalid credentials"
        return jsonify(error_message=error_message), 401


@app.route('/signup', methods=['POST'])
def signup():
    global state
    email = request.json['email']
    username = request.json['username']
    password = request.json['password']

    # Get a connection from the pool
    conn = get_connection().cursor()

    # Insert user into the database
    conn.execute("INSERT INTO users (email, username, password) VALUES (?, ?, ?)", (email, username, password))
    get_connection().commit()

    # Close the connection
    conn.close()

    success_message = "Signup successful! You can now log in."
    state = True  # Set state to True
    return jsonify(success_message=success_message, open_login=True)
###############################################################################################

'''
import os

target = os.path.join(REPO_DIRNAME, 'images')
assert os.path.isdir(target), f"{target} is not a valid directory"

#state = True

@app.route("/upload", methods=["POST"])
def upload():
    target = os.path.join(REPO_DIRNAME, 'images')
    if not os.path.isdir(target):
        os.mkdir(target)
    print(request.files.getlist("file"))
    for upload in request.files.getlist("file"):
        print(upload)
        print("{} is the file name".format(upload.filename))
        filename = upload.filename
        destination = "/".join([target, filename])
        print ("Accept incoming file:", filename)
        print ("Save it to:", destination)
        upload.save(destination)
    pred_text_model_word = ocr_model.predict_image(destination)
    return render_template("index.html", predict1=pred_text_model_word, image_name=filename)



@app.route('/upload/<filename>')
def send_image(filename):
    return send_from_directory("images", filename)

def start_tornado(app, port=5000):
    http_server = tornado.httpserver.HTTPServer(
        tornado.wsgi.WSGIContainer(app))
    http_server.listen(port)
    print("Tornado server starting on port {}".format(port))
    tornado.ioloop.IOLoop.instance().start()
    #####
    @app.context_processor
    def inject_state():
        return dict(state=state)
    #####
if __name__ == "__main__":
    #app.run(debug=True)
    start_tornado(app)